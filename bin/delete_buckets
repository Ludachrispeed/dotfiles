#!/usr/bin/env python
"""
Usage: delete_buckets.py [regex]
"""

import argparse
import json
import re
import subprocess
import sys

import botocore.session


def buckets( match=None):
    if match:
        filter = re.compile(match)
    for bucket in buckets.values():
        name = bucket['value']['bucket']['Name']
        if filter is None or filter.match(name):
            yield name


def delete_bucket(s3, name):
    # Based on:
    # https://docs.aws.amazon.com/AmazonS3/latest/dev/delete-or-empty-bucket.html#delete-bucket-sdk-java
    try:
        while True:
            rsp = s3.list_objects_v2(Bucket=name)
            contents = rsp.get('Contents')
            if contents:
                objs = [{'Key': o['Key']} for o in contents]
                print('deleting', len(objs), 'objects')
                s3.delete_objects(Bucket=name, Delete={'Objects': objs, 'Quiet': True})
            if not rsp['IsTruncated']:
                break
        while True:
            rsp = s3.list_object_versions(Bucket=name)
            versions = rsp.get('Versions')
            if versions:
                objs = [{'Key': o['Key'], 'VersionId': o['VersionId']} for o in versions]
                print('deleting', len(objs), 'object versions')
                s3.delete_objects(Bucket=name, Delete={'Objects': objs, 'Quiet': True})
            if not rsp['IsTruncated']:
                break
        print('deleting bucket')
        s3.delete_bucket(Bucket=name)
    except s3.exceptions.NoSuchBucket:
        pass


def delete_bucket_retry(s3, name, tries):
    while True:
        try:
            delete_bucket(s3, name)
            return
        except s3.exceptions.ClientError as ex:
            tries -= 1
            if ex.response['Error']['Code'] != 'BucketNotEmpty' or tries <= 0:
                raise


def get_args():
    p = argparse.ArgumentParser()
    p.add_argument('--dry-run', action='store_true',
                   help='print bucket names without deleting them')
    p.add_argument('--match', metavar='REGEX',
                   help='delete only those buckets that match the regex')
    return p.parse_args()


if __name__ == '__main__':
    args = get_args()
    sess = botocore.session.get_session()
    s3 = sess.create_client('s3')
    for bucket in buckets(args.match):
        print('==>', bucket)
        if not args.dry_run:
            delete_bucket_retry(s3, bucket, 3)
